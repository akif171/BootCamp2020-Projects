{"version":3,"sources":["Components/header.js","context/AppReducer.js","context/GlobalState.js","Components/Balance.js","Components/income.js","Components/Trans.js","Components/Transactions.js","Components/AddTransctions.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","intialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","Income","amounts","income","expense","className","Trans","sign","text","Math","abs","onClick","Transactions","key","AddTransctions","useState","setText","setAmount","onSubmit","e","preventDefault","newTransction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05399e55.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <div>\n            <header>\n            EXPENSE TRACKER\n            </header>\n        </div>\n    )\n}\nexport default Header;","import { act } from \"react-dom/test-utils\";\n\nexport default (state, action) =>{\n\n    switch (action.type){\n        case 'DELETE_TRANSACTION':\n        return {\n            ...state,\n            transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n        }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        default:\n            return state;\n    }\n\n\n}","import React, {createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n\nconst intialState = {\n    transactions:   [],\n        \n}\n\nexport const GlobalContext = createContext(intialState);\n\nexport const GlobalProvider = ({ children }) =>{\n\nconst [state, dispatch] = useReducer(AppReducer, intialState);\n\n\nfunction deleteTransaction(id){\n\n  dispatch({\n    type:\"DELETE_TRANSACTION\",\n    payload: id\n\n  })\n\n}\n \nfunction addTransaction(transaction){\n\n  dispatch({\n    type:\"ADD_TRANSACTION\",\n    payload: transaction\n  })\n\n}\n\n\nreturn(<GlobalContext.Provider value={{\n  transactions: state.transactions,\n  deleteTransaction,\n  addTransaction\n}}>\n\n{children}\n\n</GlobalContext.Provider>\n\n  )\n\n}\n","import React,{useContext} from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\n\nconst Balance = () => {\n\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n\n  return (\n    <div>\n      <h4>Your Balance</h4>\n      <h1 >${total}</h1>\n    </div>\n  )\n}\n\n\nexport default Balance;","import React, {useContext} from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n \n\nconst Income = () => {\n\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n\n  const income = amounts\n    .filter(item => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n\n  return (\n    <div>\n      <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n  <p className=\"money plus\">{income}</p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n  <p className=\"money minus\">{expense}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Income;\n","import React, {useContext} from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst Trans = ({transaction }) => {\n    const sign = transaction.amount < 0 ? '-' : '+';\n    const {deleteTransaction} = useContext(GlobalContext);\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n            {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span><button onClick={ () => deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\n        </li>\n    )\n}\n\nexport default Trans;","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport Trans from './Trans';\n\nconst Transactions = () => {\n\n    const { transactions } = useContext(GlobalContext)\n\n\n\n    return (\n        <div>\n            <h3>History</h3>\n            <ul className=\"list\">\n                {transactions.map(transaction => (<Trans key={transaction.id} transaction={transaction} />))}\n\n\n            </ul>\n        </div>\n    )\n}\n\n\nexport default Transactions;","import React, {useState, useContext} from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\n\nconst AddTransctions = () => {\n\nconst [text, setText] = useState('');\nconst [amount, setAmount] = useState(0);\nconst {addTransaction} = useContext(GlobalContext);\n\nconst  Submit = e => {\n  e.preventDefault(); \n\n  const newTransction ={\n    id: Math.floor(Math.random() * 100000000),\n    text,\n    amount: +amount\n  }\n\naddTransaction(newTransction);\n} \n\n    return (\n        <div>\n            <h3>Add new transaction</h3>\n      <form onSubmit={Submit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input type=\"text\" value={text} onChange={(e)=> setText(e.target.value)}  placeholder=\"Enter text...\" />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\"\n            >Amount <br />\n            (negative - expense, positive - income)</label\n          >\n          <input type=\"number\" value={amount} onChange={(e)=> setAmount(e.target.value)} placeholder=\"Enter amount...\" />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n        </div>\n    )\n}\n\nexport default AddTransctions;\n\n\n","import React from 'react';\nimport Header from './Components/header';\nimport './App.css';\nimport Balance from './Components/Balance';\nimport Income from './Components/income';\nimport Transactions from './Components/Transactions';\nimport AddTransaction from './Components/AddTransctions';\nimport { GlobalProvider } from './context/GlobalState';\n\n\n\nconst App = () => {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\" >\n        <Balance />\n        <Income />\n        <Transactions />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}